/* This is the master code for the robot. At this time it is not modulized
 * Add comments for each thing that you add. Try and explain what it does and where it gets
 * the parameters which it uses.
 */

package frc.robot;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.RelativeEncoder;
import java.security.Key;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
//import edu.wpi.first.wpilibj.drive.RobotDriveBase.MotorType;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
 
 
 public class Robot extends TimedRobot { 
   private CANSparkMax mohammed = new CANSparkMax( 1);
   private CANSparkMax Bob = new CANSparkMax (2);
   private CANSparkMax HERALD = new CANSparkMax (3);
   private CANSparkMax Yeah = new CANSparkMax (4);
     
   private MotorControllerGroup Soup = new MotorControllerGroup (mohammed,Bob);
   private MotorControllerGroup Hi = new MotorControllerGroup (HERALD, Yeah);
   private DifferentialDrive IEAMO = new DifferentialDrive (Soup, Hi);
   NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
   NetworkTableEntry tx = table.getEntry("tx");
   NetworkTableEntry ty = table.getEntry("ty");
   NetworkTableEntry ta = table.getEntry("ta");
   //read values periodically
   double x = tx.getDouble(0.0);
   double y = ty.getDouble(0.0);
   double area = ta.getDouble(0.0);

   //post to smart dashboard periodically
   SmartDashboard.putNumber("LimelightX", x);
   SmartDashboard.putNumber("LimelightY", y);
   SmartDashboard.putNumber("LimelightArea", area);
   }
   //Autonomous
   //private final Integer bellerika = 1;
 
   //This function is run when the robot is first started up and should be used for any initialization code.
   @Override
   public void robotInit() {
    
   }
 
   @Override
   public void robotPeriodic() {

    }
  }


   //This function is run once each time the robot enters autonomous mode.
   @Override
   public void autonomousInit() {
 


   public void Update_Limelight_Tracking()
  {
        // These numbers must be tuned for your Robot!  Be careful!
        final double STEER_K = 0.03;                    // how hard to turn toward the target
        final double DRIVE_K = 0.26;                    // how hard to drive fwd toward the target
        final double DESIRED_TARGET_AREA = 13.0;        // Area of the target when the robot reaches the wall
        final double MAX_DRIVE = 0.7;                   // Simple speed limit so we don't drive too fast

        double tv = NetworkTableInstance.getDefault().getTable("limelight").getEntry("tv").getDouble(0);
        double tx = NetworkTableInstance.getDefault().getTable("limelight").getEntry("tx").getDouble(0);
        double ty = NetworkTableInstance.getDefault().getTable("limelight").getEntry("ty").getDouble(0);
        double ta = NetworkTableInstance.getDefault().getTable("limelight").getEntry("ta").getDouble(0);

        if (tv < 1.0)
        {
          m_LimelightHasValidTarget = false;
          m_LimelightDriveCommand = 0.0;
          m_LimelightSteerCommand = 0.0;
          return;
        }

        m_LimelightHasValidTarget = true;

        // Start with proportional steering
        double steer_cmd = tx * STEER_K;
        m_LimelightSteerCommand = steer_cmd;

        // try to drive forward until the target area reaches our desired area
        double drive_cmd = (DESIRED_TARGET_AREA - ta) * DRIVE_K;

        // don't let the robot drive too fast into the goal
        if (drive_cmd > MAX_DRIVE)
        {
          drive_cmd = MAX_DRIVE;
        }
        m_LimelightDriveCommand = drive_cmd;
  }
   //This function is called periodically (20ms) during autonomous.
   @Override
   public void autonomousPeriodic() {
    
      }
    }
      }
     }
    }
  }
  

   
    
   
 
   //This function is called once each time the robot enters teleoperated mode.
   @Override
   public void teleopInit() {
    compressor.enableDigital();
    rightDrive.setInverted(true);
    leftDrive.setInverted(false);
    teleScope.setInverted(false);
   }
 
   //This function is called periodically during teleoperated mode.
   @Override
   public void teleopPeriodic() {
     //Drive Train controls
     //msClarke.arcadeDrive(-driver.getLeftY(), -driver.getRightX());
     // Arm Controls
    //conditionals to check if the safteys are not false.
    if (teleScopeSafety == false && armController.getLeftY() > 0) {
     teleScope.set(0.3);
    }
    
    if (tiltSafety == false && armController.getRightY() > 0) {
     tiltArm.set(1.0);
    }
     // Claw Controls
    //clawIntake.arcadeDrive(armController.getLeftTriggerAxis(), 0.0);
    //clawIntake.arcadeDrive((armController.getRightTriggerAxis()*-1), 0.0);
    if (armController.getBButton()) {
        rightIntake.setInverted(true);
        leftIntake.setInverted(false);
        leftIntake.set(0.5);
        rightIntake.set(0.5);
    } 
    else if (armController.getBButtonReleased()){
      leftIntake.stopMotor();
      rightIntake.stopMotor();
    }
    if (armController.getYButton()) {
      rightIntake.setInverted(false);
      leftIntake.setInverted(true);
      leftIntake.set(0.5);
      rightIntake.set(0.5);
  }
  else if (armController.getYButtonReleased()){
    leftIntake.stopMotor();
    rightIntake.stopMotor();
  }
 
     // Extend Pneumatic Cylinder
     //if (armController.getYButtonPressed()) { // use the Y button to toggle the claw open or closed.
     //  m_doubleSolenoid.toggle();
     //}
     
     if (armController.getRightBumperPressed()) { // use the right bumper to extend the cylinder
       //m_doubleSolenoid.set(DoubleSolenoid.Value.kForward);
        m_doubleSolenoid.toggle(); 
       //secondSolenoid.set(DoubleSolenoid.Value.kForward);
     }
     if (armController.getLeftBumperPressed()) { // use the left bumper to retract the cylinder
      // m_doubleSolenoid.set(DoubleSolenoid.Value.kReverse);
        m_doubleSolenoid.toggle();
       //secondSolenoid.set(DoubleSolenoid.Value.kReverse);
   }
   

 }

 @Override
  public void disabledInit() {}

  /** This function is called periodically when disabled. */
  @Override
  public void disabledPeriodic() {}
 
   //This function is called once each time the robot enters test mode.
   @Override
   public void testInit() {}
 
   //This function is called periodically during test mode.
   @Override
   public void testPeriodic() {}
 
 @Override
 public void simulationInit() {}

 /** This function is called periodically whilst in simulation. */
 @Override
 public void simulationPeriodic() {}
}
 
 
 
 /* CHANGE LOG enter the date and changes made each time you edit this code.
  * 
  */
